<?php
/**
 * Product
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * luma store api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Product implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uuid' => 'string',
        'sku' => 'string',
        'sku_id' => 'string',
        'product_category' => 'string',
        'internal_id' => 'int',
        'availability' => '\OpenAPI\Client\Model\ProductAvailability',
        'price' => 'float',
        'currency' => 'string',
        'item_group_id' => 'string',
        'title' => 'string',
        'description' => 'string',
        'gender' => 'string',
        'image_link' => 'string',
        'material' => 'string',
        'pattern' => 'string',
        'product_weight' => 'float',
        'size' => 'string',
        'color' => 'string',
        'system_link' => 'string',
        'link' => 'string',
        'brand' => 'string',
        'model' => 'string',
        'gtin' => 'string',
        'condition' => 'string',
        'adult' => 'string',
        'review_summaries' => 'string',
        'average_rating' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'uuid' => 'uuid',
        'sku' => null,
        'sku_id' => null,
        'product_category' => null,
        'internal_id' => null,
        'availability' => null,
        'price' => null,
        'currency' => null,
        'item_group_id' => null,
        'title' => null,
        'description' => null,
        'gender' => null,
        'image_link' => null,
        'material' => null,
        'pattern' => null,
        'product_weight' => null,
        'size' => null,
        'color' => null,
        'system_link' => null,
        'link' => null,
        'brand' => null,
        'model' => null,
        'gtin' => null,
        'condition' => null,
        'adult' => null,
        'review_summaries' => null,
        'average_rating' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'uuid' => true,
        'sku' => false,
        'sku_id' => true,
        'product_category' => false,
        'internal_id' => true,
        'availability' => false,
        'price' => false,
        'currency' => false,
        'item_group_id' => false,
        'title' => false,
        'description' => false,
        'gender' => false,
        'image_link' => false,
        'material' => false,
        'pattern' => false,
        'product_weight' => false,
        'size' => false,
        'color' => false,
        'system_link' => false,
        'link' => false,
        'brand' => false,
        'model' => false,
        'gtin' => false,
        'condition' => false,
        'adult' => false,
        'review_summaries' => false,
        'average_rating' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uuid' => 'uuid',
        'sku' => 'sku',
        'sku_id' => 'sku_id',
        'product_category' => 'product_category',
        'internal_id' => 'internal_id',
        'availability' => 'availability',
        'price' => 'price',
        'currency' => 'currency',
        'item_group_id' => 'item_group_id',
        'title' => 'title',
        'description' => 'description',
        'gender' => 'gender',
        'image_link' => 'image_link',
        'material' => 'material',
        'pattern' => 'pattern',
        'product_weight' => 'product_weight',
        'size' => 'size',
        'color' => 'color',
        'system_link' => 'system_link',
        'link' => 'link',
        'brand' => 'brand',
        'model' => 'model',
        'gtin' => 'gtin',
        'condition' => 'condition',
        'adult' => 'adult',
        'review_summaries' => 'review_summaries',
        'average_rating' => 'average_rating'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uuid' => 'setUuid',
        'sku' => 'setSku',
        'sku_id' => 'setSkuId',
        'product_category' => 'setProductCategory',
        'internal_id' => 'setInternalId',
        'availability' => 'setAvailability',
        'price' => 'setPrice',
        'currency' => 'setCurrency',
        'item_group_id' => 'setItemGroupId',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'gender' => 'setGender',
        'image_link' => 'setImageLink',
        'material' => 'setMaterial',
        'pattern' => 'setPattern',
        'product_weight' => 'setProductWeight',
        'size' => 'setSize',
        'color' => 'setColor',
        'system_link' => 'setSystemLink',
        'link' => 'setLink',
        'brand' => 'setBrand',
        'model' => 'setModel',
        'gtin' => 'setGtin',
        'condition' => 'setCondition',
        'adult' => 'setAdult',
        'review_summaries' => 'setReviewSummaries',
        'average_rating' => 'setAverageRating'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uuid' => 'getUuid',
        'sku' => 'getSku',
        'sku_id' => 'getSkuId',
        'product_category' => 'getProductCategory',
        'internal_id' => 'getInternalId',
        'availability' => 'getAvailability',
        'price' => 'getPrice',
        'currency' => 'getCurrency',
        'item_group_id' => 'getItemGroupId',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'gender' => 'getGender',
        'image_link' => 'getImageLink',
        'material' => 'getMaterial',
        'pattern' => 'getPattern',
        'product_weight' => 'getProductWeight',
        'size' => 'getSize',
        'color' => 'getColor',
        'system_link' => 'getSystemLink',
        'link' => 'getLink',
        'brand' => 'getBrand',
        'model' => 'getModel',
        'gtin' => 'getGtin',
        'condition' => 'getCondition',
        'adult' => 'getAdult',
        'review_summaries' => 'getReviewSummaries',
        'average_rating' => 'getAverageRating'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('uuid', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('sku_id', $data ?? [], null);
        $this->setIfExists('product_category', $data ?? [], '');
        $this->setIfExists('internal_id', $data ?? [], null);
        $this->setIfExists('availability', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], 0);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('item_group_id', $data ?? [], '');
        $this->setIfExists('title', $data ?? [], '');
        $this->setIfExists('description', $data ?? [], '');
        $this->setIfExists('gender', $data ?? [], '');
        $this->setIfExists('image_link', $data ?? [], '');
        $this->setIfExists('material', $data ?? [], '');
        $this->setIfExists('pattern', $data ?? [], '');
        $this->setIfExists('product_weight', $data ?? [], 0);
        $this->setIfExists('size', $data ?? [], '');
        $this->setIfExists('color', $data ?? [], '');
        $this->setIfExists('system_link', $data ?? [], '');
        $this->setIfExists('link', $data ?? [], '');
        $this->setIfExists('brand', $data ?? [], '');
        $this->setIfExists('model', $data ?? [], '');
        $this->setIfExists('gtin', $data ?? [], '');
        $this->setIfExists('condition', $data ?? [], '');
        $this->setIfExists('adult', $data ?? [], '');
        $this->setIfExists('review_summaries', $data ?? [], '');
        $this->setIfExists('average_rating', $data ?? [], 0.0);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ($this->container['availability'] === null) {
            $invalidProperties[] = "'availability' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        if (is_null($uuid)) {
            array_push($this->openAPINullablesSetToNull, 'uuid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uuid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return self
     */
    public function setSku($sku)
    {
        if (is_null($sku)) {
            throw new \InvalidArgumentException('non-nullable sku cannot be null');
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets sku_id
     *
     * @return string|null
     */
    public function getSkuId()
    {
        return $this->container['sku_id'];
    }

    /**
     * Sets sku_id
     *
     * @param string|null $sku_id sku_id
     *
     * @return self
     */
    public function setSkuId($sku_id)
    {
        if (is_null($sku_id)) {
            array_push($this->openAPINullablesSetToNull, 'sku_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sku_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sku_id'] = $sku_id;

        return $this;
    }

    /**
     * Gets product_category
     *
     * @return string|null
     */
    public function getProductCategory()
    {
        return $this->container['product_category'];
    }

    /**
     * Sets product_category
     *
     * @param string|null $product_category product_category
     *
     * @return self
     */
    public function setProductCategory($product_category)
    {
        if (is_null($product_category)) {
            throw new \InvalidArgumentException('non-nullable product_category cannot be null');
        }
        $this->container['product_category'] = $product_category;

        return $this;
    }

    /**
     * Gets internal_id
     *
     * @return int|null
     */
    public function getInternalId()
    {
        return $this->container['internal_id'];
    }

    /**
     * Sets internal_id
     *
     * @param int|null $internal_id internal_id
     *
     * @return self
     */
    public function setInternalId($internal_id)
    {
        if (is_null($internal_id)) {
            array_push($this->openAPINullablesSetToNull, 'internal_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internal_id'] = $internal_id;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return \OpenAPI\Client\Model\ProductAvailability
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param \OpenAPI\Client\Model\ProductAvailability $availability availability
     *
     * @return self
     */
    public function setAvailability($availability)
    {
        if (is_null($availability)) {
            throw new \InvalidArgumentException('non-nullable availability cannot be null');
        }
        $this->container['availability'] = $availability;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets item_group_id
     *
     * @return string|null
     */
    public function getItemGroupId()
    {
        return $this->container['item_group_id'];
    }

    /**
     * Sets item_group_id
     *
     * @param string|null $item_group_id item_group_id
     *
     * @return self
     */
    public function setItemGroupId($item_group_id)
    {
        if (is_null($item_group_id)) {
            throw new \InvalidArgumentException('non-nullable item_group_id cannot be null');
        }
        $this->container['item_group_id'] = $item_group_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            throw new \InvalidArgumentException('non-nullable gender cannot be null');
        }
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets image_link
     *
     * @return string|null
     */
    public function getImageLink()
    {
        return $this->container['image_link'];
    }

    /**
     * Sets image_link
     *
     * @param string|null $image_link image_link
     *
     * @return self
     */
    public function setImageLink($image_link)
    {
        if (is_null($image_link)) {
            throw new \InvalidArgumentException('non-nullable image_link cannot be null');
        }
        $this->container['image_link'] = $image_link;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material material
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            throw new \InvalidArgumentException('non-nullable material cannot be null');
        }
        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets pattern
     *
     * @return string|null
     */
    public function getPattern()
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     *
     * @param string|null $pattern pattern
     *
     * @return self
     */
    public function setPattern($pattern)
    {
        if (is_null($pattern)) {
            throw new \InvalidArgumentException('non-nullable pattern cannot be null');
        }
        $this->container['pattern'] = $pattern;

        return $this;
    }

    /**
     * Gets product_weight
     *
     * @return float|null
     */
    public function getProductWeight()
    {
        return $this->container['product_weight'];
    }

    /**
     * Sets product_weight
     *
     * @param float|null $product_weight product_weight
     *
     * @return self
     */
    public function setProductWeight($product_weight)
    {
        if (is_null($product_weight)) {
            throw new \InvalidArgumentException('non-nullable product_weight cannot be null');
        }
        $this->container['product_weight'] = $product_weight;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            throw new \InvalidArgumentException('non-nullable color cannot be null');
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets system_link
     *
     * @return string|null
     */
    public function getSystemLink()
    {
        return $this->container['system_link'];
    }

    /**
     * Sets system_link
     *
     * @param string|null $system_link system_link
     *
     * @return self
     */
    public function setSystemLink($system_link)
    {
        if (is_null($system_link)) {
            throw new \InvalidArgumentException('non-nullable system_link cannot be null');
        }
        $this->container['system_link'] = $system_link;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string|null
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string|null $link link
     *
     * @return self
     */
    public function setLink($link)
    {
        if (is_null($link)) {
            throw new \InvalidArgumentException('non-nullable link cannot be null');
        }
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand brand
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (is_null($brand)) {
            throw new \InvalidArgumentException('non-nullable brand cannot be null');
        }
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        if (is_null($model)) {
            throw new \InvalidArgumentException('non-nullable model cannot be null');
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin gtin
     *
     * @return self
     */
    public function setGtin($gtin)
    {
        if (is_null($gtin)) {
            throw new \InvalidArgumentException('non-nullable gtin cannot be null');
        }
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition condition
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets adult
     *
     * @return string|null
     */
    public function getAdult()
    {
        return $this->container['adult'];
    }

    /**
     * Sets adult
     *
     * @param string|null $adult adult
     *
     * @return self
     */
    public function setAdult($adult)
    {
        if (is_null($adult)) {
            throw new \InvalidArgumentException('non-nullable adult cannot be null');
        }
        $this->container['adult'] = $adult;

        return $this;
    }

    /**
     * Gets review_summaries
     *
     * @return string|null
     */
    public function getReviewSummaries()
    {
        return $this->container['review_summaries'];
    }

    /**
     * Sets review_summaries
     *
     * @param string|null $review_summaries review_summaries
     *
     * @return self
     */
    public function setReviewSummaries($review_summaries)
    {
        if (is_null($review_summaries)) {
            throw new \InvalidArgumentException('non-nullable review_summaries cannot be null');
        }
        $this->container['review_summaries'] = $review_summaries;

        return $this;
    }

    /**
     * Gets average_rating
     *
     * @return float|null
     */
    public function getAverageRating()
    {
        return $this->container['average_rating'];
    }

    /**
     * Sets average_rating
     *
     * @param float|null $average_rating average_rating
     *
     * @return self
     */
    public function setAverageRating($average_rating)
    {
        if (is_null($average_rating)) {
            throw new \InvalidArgumentException('non-nullable average_rating cannot be null');
        }
        $this->container['average_rating'] = $average_rating;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


